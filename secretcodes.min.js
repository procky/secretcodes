/**
 * SecretCodes: Secret codes, like videogame cheat codes (e.g. Konami code), in the web browser.
 *
 * @author Adam Wicks
 * @license MIT
 * @version 2.0.0
 */
export default class SecretCodeManager{#e;#t=[];#r=[];#s=100;#n=0;#i;#o="";static get keyNameMap(){return new Map([["backspace","Backspace"],["tab","Tab"],["enter","Enter"],["shift","Shift"],["ctrl","Control"],["alt","Alt"],["escape","Escape"],["space"," "],["pageup","PageUp"],["pagedown","PageDown"],["end","End"],["home","Home"],["left","ArrowLeft"],["up","ArrowUp"],["right","ArrowRight"],["down","ArrowDown"],["insert","Insert"],["delete","Delete"],...Array.from({length:10},((e,t)=>[String(t),String(t)])),..."abcdefghijklmnopqrstuvwxyz".split("").map((e=>[e,e.toLowerCase()]))])}static#a(e){if(1===e.length)return e.toLowerCase();const t=SecretCodeManager.keyNameMap.get(e.toLowerCase());if(t)return t;if(e.includes(" "))return e.split(" ").map((e=>this.#a(e))).join(" ");throw new Error(`Unrecognised key: '${e}'. Only single characters and standard key names are allowed.`)}constructor(e=document){if(!e||!(e instanceof HTMLElement||e===document))throw new Error("Target must be an HTMLElement or document");this.#e=e,this.#i=this.#l.bind(this),this.#e.addEventListener("keydown",this.#i)}addSecretCode(e,t){if("string"!=typeof e||""===e.trim())throw new Error("Code string must be a non-empty string.");if("function"!=typeof t)throw new Error("Callback must be a function.");const r=this.isValidCode(e);if(!r.isValid)throw new Error(r.error||"Invalid code");const s=e.split(" ").filter((e=>""!==e.trim())).map((e=>SecretCodeManager.#a(e)));this.#n=Math.max(this.#n,s.length),this.#t.push({code:s,callback:t})}removeSecretCode(e){if("string"!=typeof e||""===e.trim())return!1;if(!this.isValidCode(e).isValid)return!1;const t=e.split(" ").filter((e=>""!==e.trim())).map((e=>SecretCodeManager.#a(e))),r=this.#t.length;this.#t=this.#t.filter((e=>!this.#c(e.code,t)));const s=this.#t.length<r;return s&&this.#d(),s}get currentGuess(){return this.#o}destroy(){this.#e&&this.#i&&this.#e.removeEventListener("keydown",this.#i),this.#t=[],this.#r=[],this.#n=0,this.#o=""}isValidCode(e){if("string"!=typeof e||""===e.trim())return{isValid:!1,error:"Code string must be a non-empty string."};const t=e.split(" ").filter((e=>""!==e.trim()));if(0===t.length)return{isValid:!1,error:"Code must contain at least one key."};for(const e of t)try{SecretCodeManager.#a(e)}catch(t){return{isValid:!1,error:`Invalid key '${e}' in code. ${t.message}`}}return{isValid:!0}}#l(e){if(e.repeat)return;const t=e.key,r=SecretCodeManager.keyNameMap.get(t.toLowerCase())||t;this.#r.push(r),this.#r.length>this.#s&&this.#r.shift(),this.#o=this.#r.slice(-this.#n).join(" ");for(const{code:t,callback:r}of this.#t){const s=this.#r.slice(-t.length);if(s.length===t.length&&this.#c(s,t)){r(e);break}}}#c(e,t){return e.length===t.length&&e.every(((e,r)=>e===t[r]))}getCurrentGuess(){return this.#o}#d(){this.#n=this.#t.reduce(((e,{code:t})=>Math.max(e,t.length)),0)}}
//# sourceMappingURL=secretcodes.min.js.map